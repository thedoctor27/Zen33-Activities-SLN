@page "/"
@using activities.Models;
@using activities.Repository.UserProfil;
@inject IUserProfileReposiotry _profileService;
@using Microsoft.Extensions.Localization;
@using activities.Resources;
@inject IStringLocalizer<Countries> CountriesLocalizer
@inject IStringLocalizer<Languages> LanguagesLocalizer
@using activities.Repository.Configs;
@inject AuthenticationStateProvider AuthenticationStateProvider
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims;
@using Microsoft.AspNetCore.Identity;
@using activities.Repository.Activities;
@inject IActivitiesRepository ActivitiesService;
@inject IAppConfigsRepository _ConfigService;

<MudContainer Width="100%" MaxWidth="MaxWidth.ExtraExtraLarge">
    <h1>Welcome</h1>

    <AuthorizeView Roles="Admin">
        <div class="row">
            <div class="col-md-12">
                <div class="@(TestEnabled ? "alert alert-danger" : "alert alert-info")">
                    <MudSwitch @onclick="@((e)=>TestModeChanged())" Checked="@TestEnabled" Label="Enable Test Users mode" Color="Color.Error" />
                </div>
            </div>
        </div>
        @if (stats == null)
        {
            <p>Loading ...</p>
        }
        else
        {
            <div class="row">
                <div class="col-md-12">
                    <div class="col-md-12">
                        <ul class="nav nav-pills">
                            <li class="nav-item">
                                <a class="nav-link @((GroupName == "Country") ? "active" : "")" @onclick='() => SetActiveTab("Country")' href="javascript:void(0)">Countries</a>
                            </li>
                            <li class="nav-item">
                                <a class="nav-link @((GroupName == "Language") ? "active" : "")" @onclick='() => SetActiveTab("Language")' href="javascript:void(0)">Languages</a>
                            </li>
                        </ul>
                    </div>
                    <MudPaper Class="d-flex mud-width-full py-8 p-3">
                        <div class="col-md-12">
                            <table class="table">
                                <thead>
                                    <tr>
                                        <th> @GroupName <a class="  btn btn-xs @((SortField == "Name") ? " btn-primary" : "btn-secondary")" @onclick='() => SortBy("Name")'> <i class="oi oi-sort-ascending"></i> </a> </th>
                                        <th> Total <a class="   btn btn-xs @((SortField == "Total") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Total")'> <i class="oi oi-sort-descending"></i> </a>  </th>
                                        <th> Review <a class="   btn btn-xs @((SortField == "Review") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Review")'> <i class="oi oi-sort-descending"></i> </a>  </th>
                                        <th> Approved <a class="   btn btn-xs @((SortField == "Approved") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Approved")'> <i class="oi oi-sort-descending"></i>  </a></th>

                                        <th> Not Approved <a class="   btn btn-xs @((SortField == "Not Approved") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Not Approved")'><i class="oi oi-sort-descending"></i> </a>  </th>

                                        <th> Member <a class="   btn btn-xs @((SortField == "Member") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Member")'> <i class="oi oi-sort-descending"></i> </a> </th>

                                        <th> Available <a class="   btn btn-xs @((SortField == "Available") ? "btn-primary" : "btn-secondary")" @onclick='() => SortBy("Available")'> <i class="oi oi-sort-descending"></i> </a> </th>
                                    </tr>
                                </thead>
                                <tbody>
                                    @foreach (var s in stats)
                                    {
                                        <tr>
                                            <td>@s.name</td>
                                            <td>@s.total</td>
                                            <td>@s.review</td>
                                            <td>@s.approved</td>
                                            <td>@s.notapproved</td>
                                            <td>@s.member</td>
                                            <td>@s.available</td>
                                        </tr>
                                    }
                                </tbody>
                            </table>
                        </div>
                    </MudPaper>

                </div>
            </div>

        }



    </AuthorizeView>
    <br />
    <br />
    <MudGrid>
        <MudItem xs="12">
            <MudCard>
                <MudCardHeader Class="pb-1">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Last 20 Registred and approved profiles</MudText>
                    </CardHeaderContent>
                </MudCardHeader>
                <MudCardContent>
                    @if (loading)
                    {
                        <MudProgressCircular Color="Color.Default" Indeterminate="true" />
                    }
                    else
                    {
                        <MudTable T="UserProfile" Items="top20" Dense="true" Hover="true">

                            <HeaderContent>
                                <MudTh>photo</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh>Country</MudTh>
                                <MudTh>City</MudTh>
                                <MudTh>Language</MudTh>
                                <MudTh>Activity</MudTh>
                                <MudTh>Available</MudTh>
                                <MudTh>Member</MudTh>
                            </HeaderContent>
                            <RowTemplate>
                                <MudTd>
                                    @if (!string.IsNullOrEmpty(context.Base64Photo))
                                    {
                                        <img class="" width="50" height="50" src="@context.Base64Photo">
                                    }
                                    else
                                    {
                                        <img class="" width="50" height="50" src="/images/DefaultUser.png">
                                    }
                                </MudTd>
                                <MudTd DataLabel="Name">
                                    <b> <a target="_blank" href="Profile/@context.UserId"> @context.Name </a> </b>
                                </MudTd>
                                <MudTd DataLabel="Country">
                                    @MapCountry(context.IdCountry)
                                </MudTd>
                                <MudTd DataLabel="City">
                                    @context.City
                                </MudTd>
                                <MudTd DataLabel="Language">
                                    @MapLanguage(context.IdLanguage)
                                </MudTd>
                                <MudTd DataLabel="Activity">
                                    @MapActivity(context.IdActivity)
                                </MudTd>
                                <MudTd DataLabel="Available">
                                    @(context.Available == true ? "Yes" : "No")
                                </MudTd>
                                <MudTd DataLabel="Member">
                                    @(context.Member == 1 ? "Yes" : "No")
                                </MudTd>
                            </RowTemplate>
                        </MudTable>

                    }
                </MudCardContent>
                <MudCardActions>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>

</MudContainer>


@code {
    public bool TestEnabled { get; set; }

    private string GroupName;
    private string SortField;
    private IEnumerable<StatsModel>? stats;
    private IEnumerable<UserProfile> top20;
    private bool loading = true;
    private Dictionary<string, string> countries = new Dictionary<string, string>();
    private Dictionary<string, string> languages = new Dictionary<string, string>();
    private Dictionary<int, string> activities = new Dictionary<int, string>();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await loadData();
        }


    }
    private async Task loadData()
    {
        countries = CountriesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);

        languages = LanguagesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);
        activities = ActivitiesService.GetAll().ToDictionary(s => s.Id, s => s.Name);

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        if (authState.User.Identity.IsAuthenticated)
        {
            var userRole = authState?.User?.Claims.Where(c => c.Type == ClaimTypes.Role).FirstOrDefault();
            if (userRole != null)
            {
                if (userRole.Value.Contains("Admin"))
                {

                    try
                    {
                        TestEnabled = await _ConfigService.GetTestsUserMode();
                        StateHasChanged();
                    }
                    catch (Exception ex)
                    {
                        TestEnabled = false;
                    }

                    await SetActiveTab("Country");
                }
            }

        }
        top20 = await _profileService.Last20Registred();
        loading = false;
        StateHasChanged();
    }
    private async Task TestModeChanged()
    {
        await _ConfigService.SetTestsUserMode(!TestEnabled);
        TestEnabled = !TestEnabled;
        await loadData();

    }

    public async Task SetActiveTab(string groupBy)
    {
        stats = null;
        GroupName = groupBy;
        SortField = "Name";
        Dictionary<string, string> ressources = new Dictionary<string, string>();
        switch (groupBy)
        {
            case "Country":
                ressources = CountriesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);
                break;
            case "Language":
                ressources = LanguagesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);
                break;
            default: break;
        }
        stats = await _profileService.GetStats(groupBy, ressources);

    }
    public async Task SortBy(string field)
    {
        SortField = field;
        switch (field)
        {
            case "Name":
                stats = stats.OrderBy(o => o.name);
                break;
            case "Total":
                stats = stats.OrderByDescending(o => o.total);
                break;
            case "Review":
                stats = stats.OrderByDescending(o => o.review);
                break;
            case "Approved":
                stats = stats.OrderByDescending(o => o.approved);
                break;
            case "Not Approved":
                stats = stats.OrderByDescending(o => o.notapproved);
                break;
            case "Member":
                stats = stats.OrderByDescending(o => o.member);
                break;
            case "Available":
                stats = stats.OrderByDescending(o => o.available);
                break;
        }
    }
    private string MapCountry(int id)
    {
        try
        {
            return countries[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapLanguage(int id)
    {
        try
        {
            return languages[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapActivity(int id)
    {
        try
        {
            return ActivitiesService.GetById(id).Name;
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
}