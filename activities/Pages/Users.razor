@page "/users"
@using activities.Extensions;
@using activities.Models;
@using activities.Repository.UserProfil;
@inject IUserProfileReposiotry _profileService;
@attribute [Authorize(Roles = "Admin")]
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@inject IWebHostEnvironment Env;
@using activities.Repository.Activities;
@inject IActivitiesRepository ActivitiesService;
@inject IHttpContextAccessor HttpContextAccessor;
@using Microsoft.Extensions.Localization;
@using activities.Resources;
@inject IStringLocalizer<Countries> CountriesLocalizer
@inject IStringLocalizer<Languages> LanguagesLocalizer
<h3>Manage Users</h3>
<EditForm Model="@searchModel" OnSubmit="(()=>SubmitNewSearch())">
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label">Countries</label>
            <InputSelect class="form-control" ValueExpression="@(()=>searchModel.IdCountry)" Value="@searchModel.IdCountry"
                         ValueChanged="@((int value) => CountryChanged(value))">
                <option value="0">Select a country</option>
                @foreach (var cnt in countries.Where(x => ActiveCountries.Contains(x.Key)).OrderBy(s => s.Value))
                {
                    <option value="@cnt.Key">@cnt.Value</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6">
            <label class="form-label">City</label>
            <InputText class="form-control" @bind-Value="searchModel.City"></InputText>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-6">
            <label class="form-label">Languages</label>
            <InputSelect class="form-control" @bind-Value="searchModel.IdLanguage">
                <option value="0">Select a language</option>
                @foreach (var cnt in languages.Where(x => ActiveLanguages.Contains(x.Key)).OrderBy(s => s.Value))
                {
                    <option value="@cnt.Key">@cnt.Value</option>
                }
            </InputSelect>
        </div>
        <div class="col-md-6">
            <label class="form-label">Activities</label>
            <InputSelect class="form-control" @bind-Value="searchModel.IdActivity">
                <option value="0">Select an activity</option>
                @foreach (var cnt in activities.Where(x => ActiveActivities.Contains(x.Key)).OrderBy(s => s.Value))
                {
                    <option value="@cnt.Key">@cnt.Value</option>
                }
            </InputSelect>
        </div>
    </div>
    <div class="row mb-2">
        <div class="col-md-3">
            <label class="form-label">Approval</label>
            <InputSelect class="form-control" @bind-Value="searchModel.Approval">
                <option value="-1">Approval state</option>
                <option value="0">Under review</option>
                <option value="1">Yes</option>
                <option value="2">No</option>
            </InputSelect>
        </div>
        <div class="col-md-3">
            <label class="form-label">Member</label>
            <InputSelect class="form-control" @bind-Value="searchModel.Member">
                <option value="-1">Memeber state</option>
                <option value="1">Yes</option>
                <option value="0">No</option>
            </InputSelect>
        </div>
        <div class="col-md-3">
            <label class="form-label">Results per page</label>

            <InputSelect class="form-control" @bind-Value="searchModel.PageSize">
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </InputSelect>
        </div>
        <div class="col-md-3">
            <br />
            <button type="submit" disabled="@(searchModel.IdLanguage==0&&searchModel.IdCountry==0&&string.IsNullOrEmpty(searchModel.City))" class="btn btn-primary">Search</button>
        </div>
    </div>

</EditForm>
<hr />
@if (profiles == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Total of @TotalSearchResults users found</p>
    <table class="table">
        <thead>
            <tr>
                <th>photo</th>
                <th>Name</th>
                <th>Country</th>
                <th>City</th>
                <th>Language</th>
                <th>Activity</th>
                <th>Available</th>
                <th>Approval</th>
                <th>Member</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var profile in profiles)
            {
                <tr>
                    <td>
                        @if (!string.IsNullOrEmpty(profile.Base64Photo))
                        {
                            <img class="" width="50" height="50" src="@profile.Base64Photo">
                        }
                        else
                        {
                            <small>No photo</small>
                        }
                    </td>
                    <td> <a target="_blank" href="Profile/@profile.UserId"> @profile.Name </a> </td>
                    <td>@MapCountry(profile.IdCountry)</td>
                    <td>@profile.City</td>
                    <td>@MapLanguage(profile.IdLanguage)</td>
                    <td>@MapActivity(profile.IdActivity)</td>
                    <td> @(profile.Available == true ? "Yes" : "No")</td>
                    <td>@(profile.Approval == 0 ? "Under Review" : profile.Approval == 1 ? "Yes" : "No")</td>
                    <td>@(profile.Member == 1 ? "Yes" : "No")</td>
                </tr>
            }
        </tbody>
    </table>
    <br />
    <nav aria-label="navigation">
        <ul class="pagination justify-content-center">
            @for (int p = 1; p <= TotalSearchResults / searchModel.PageSize; p++)
            {
                var local_p = p;
                <li class="page-item">
                    <button type="button" class="btn @(local_p==currentPage ? "btn-primary" : "") " @onclick="(e=>UpdatePage(local_p))"> @local_p</button>
                </li>
            }
        </ul>
    </nav>
}

@code {

    private int TotalSearchResults = 0;
    private int currentPage = 1;
    SearchModel searchModel = new SearchModel
        {
            IdActivity = 0,
            IdCountry = 0,
            IdLanguage = 0,
            City = "",
            PageSize = 25,
            Approval = -1,
            Member = -1
        };

    private UserProfile[]? profiles = new UserProfile[] { };

    private Dictionary<string, string> countries = new Dictionary<string, string>();
    private Dictionary<string, string> languages = new Dictionary<string, string>();
    private Dictionary<int, string> activities = new Dictionary<int, string>();
    private string[] ActiveCountries = new string[] { };
    private string[] ActiveLanguages = new string[] { };
    private int[] ActiveActivities = new int[] { };

    protected override async Task OnInitializedAsync()
    {

        countries = CountriesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);

        languages = LanguagesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);

        activities = ActivitiesService.GetAll().ToDictionary(s => s.Id, s => s.Name);

        ActiveCountries = await _profileService.GetProfilesCountries();
        ActiveActivities = await _profileService.GetProfilesActivites();
        ActiveLanguages = await _profileService.GetProfilesLanguages(0);

    }
    private async Task CountryChanged(int country)
    {
        searchModel.IdCountry = country;
        searchModel.IdLanguage = 0;
        ActiveLanguages = await _profileService.GetProfilesLanguages(searchModel.IdCountry);
    }
    private Task UpdatePage(int page)
    {
        currentPage = page;
        return Search();
    }
    private async Task SubmitNewSearch()
    {
        TotalSearchResults = await _profileService.CountSearchProfiles(searchModel);
        currentPage = 1;
        StateHasChanged();
        await Search();

    }
    private async Task Search()
    {
        profiles = null;
        profiles = await _profileService.SearchProfiles(currentPage, searchModel);
    }

    private string MapCountry(int id)
    {
        try
        {
            return countries[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapLanguage(int id)
    {
        try
        {
            return languages[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapActivity(int id)
    {
        try
        {
            return activities[id];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }

    private void SeedRandomData()
    {
    }
}
