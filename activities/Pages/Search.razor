@page "/search"
@using activities.Extensions;
@using activities.Models;
@using activities.Repository.UserProfil;
@inject IUserProfileReposiotry _profileService;
@using Microsoft.AspNetCore.Hosting;
@using Microsoft.Extensions.Hosting;
@inject IWebHostEnvironment Env;
@using activities.Repository.Activities;
@inject IActivitiesRepository ActivitiesService;
@inject IHttpContextAccessor HttpContextAccessor;
@using Microsoft.Extensions.Localization;
@using activities.Resources;
@inject IStringLocalizer<Countries> CountriesLocalizer
@inject IStringLocalizer<Languages> LanguagesLocalizer

<MudContainer Width="100%" MaxWidth="MaxWidth.ExtraExtraLarge">
    <MudGrid Class="mt-2">
        <MudItem xs="4">
            <MudCard>
                <MudCardHeader Class="pb-1">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Search Form</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudIconButton Icon="@Icons.Material.Filled.Search" Color="Color.Default" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent Class="pt-0">
                    <EditForm Model="@searchModel" OnSubmit="(()=>SubmitNewSearch())">
                        <MudGrid>
                            <MudItem xs="7">
                                <MudAutocomplete T="Country" Label="Countries" ValueChanged="@((e)=>CountryChanged(e))"
                                                 SearchFunc="@SearchCountry" Value="SelectedCountry"
                                                 ResetValueOnEmptyText="true"
                                                 CoerceText="false" CoerceValue="false"
                                                 AdornmentColor="Color.Primary" />
                            </MudItem>
                            <MudItem xs="5">
                                <MudTextField @bind-Value="searchModel.City" Label="City" Variant="Variant.Text"></MudTextField>
                            </MudItem>
                            <MudItem xs="7">
                                <MudAutocomplete T="Language" Label="Languages" ValueChanged="@((e)=>LanguageChanged(e))"
                                                 SearchFunc="@SearchLanguage" Value="SelectedLanguage"
                                                 ResetValueOnEmptyText="true"
                                                 CoerceText="false" CoerceValue="false"
                                                 AdornmentColor="Color.Primary" />
                            </MudItem>
                            <MudItem xs="5">
                                <MudSelect T="int" Label="Available state" @bind-Value="searchModel.Available" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="-1">All Users</MudSelectItem>
                                    <MudSelectItem Value="0">Only vailable </MudSelectItem>
                                    <MudSelectItem Value="1">Only not available</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                            <MudItem xs="7">
                                <MudAutocomplete T="Activity" Label="Activities" ValueChanged="@((e)=>ActivityChanged(e))"
                                                 SearchFunc="@SearchActivity" Value="SelectedActivity"
                                                 ResetValueOnEmptyText="true"
                                                 CoerceText="false" CoerceValue="false"
                                                 AdornmentColor="Color.Primary" />
                            </MudItem>
                            <MudItem xs="5">
                                <MudSelect T="int" Label="Results per page" @bind-Value="searchModel.PageSize" AnchorOrigin="Origin.BottomCenter">
                                    <MudSelectItem Value="10">10</MudSelectItem>
                                    <MudSelectItem Value="25">25</MudSelectItem>
                                    <MudSelectItem Value="50">50 </MudSelectItem>
                                    <MudSelectItem Value="100">100</MudSelectItem>
                                </MudSelect>
                            </MudItem>
                        </MudGrid>
                        <MudCardActions>
                            <MudButton OnClick="ClearForm" Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.Clear">Clear</MudButton>
                            <MudSpacer />
                            <MudButton ButtonType="ButtonType.Submit" StartIcon="@Icons.Material.Filled.Search" Variant="Variant.Filled" disabled="@(searchModel.IdLanguage==0&&searchModel.IdCountry==0&&string.IsNullOrEmpty(searchModel.City))" Color="Color.Primary">Search</MudButton>
                        </MudCardActions>
                    </EditForm>
                </MudCardContent>

            </MudCard>
        </MudItem>
        <MudItem xs="8">
            <MudCard>
                <MudCardHeader Class="pb-1">
                    <CardHeaderContent>
                        <MudText Typo="Typo.h6">Search Result</MudText>
                        <MudText Typo="Typo.subtitle1">Total of @TotalSearchResults users found</MudText>
                    </CardHeaderContent>
                    <CardHeaderActions>
                        <MudSwitch @bind-Checked="@DisplayInCards" Color="Color.Primary" Label="Cards view" />
                    </CardHeaderActions>
                </MudCardHeader>
                <MudCardContent>
                    <MudTable RowsPerPageChanged="UpdatePageSize" RowsPerPage="searchModel.PageSize" ServerData="@(new Func<TableState, Task<TableData<UserProfile>>>(ServerReload))"
                              Dense="true" Hover="true" @ref="table">

                        <HeaderContent>
                            @if (!DisplayInCards)
                            {
                                <MudTh>photo</MudTh>
                                <MudTh>Name</MudTh>
                                <MudTh>Country</MudTh>
                                <MudTh>City</MudTh>
                                <MudTh>Language</MudTh>
                                <MudTh>Activity</MudTh>
                                <MudTh>Available</MudTh>
                                <MudTh></MudTh>
                            }

                        </HeaderContent>
                        <RowTemplate>
                            @if (!DisplayInCards)
                            {
                                <MudTd>
                                    @if (!string.IsNullOrEmpty(context.Base64Photo))
                                    {
                                        <img class="" width="50" height="50" src="@context.Base64Photo">
                                    }
                                    else
                                    {
                                        <img class="" width="50" height="50" src="/images/DefaultUser.png">
                                    }
                                </MudTd>
                                <MudTd DataLabel="Name">
                                    <b> <a target="_blank" href="Profile/@context.UserId"> @context.Name </a> </b>
                                </MudTd>
                                <MudTd DataLabel="Country">
                                    @MapCountry(context.IdCountry)
                                </MudTd>
                                <MudTd DataLabel="City">
                                    @context.City
                                </MudTd>
                                <MudTd DataLabel="Language">
                                    @MapLanguage(context.IdLanguage)
                                </MudTd>
                                <MudTd DataLabel="Activity">
                                    @MapActivity(context.IdActivity)
                                </MudTd>
                                <MudTd DataLabel="Available">
                                    @(context.Available == true ? "Yes" : "No")
                                </MudTd>
                                <MudTd>
                                    <MudButton target="_blank" Href="@("Profile/"+@context.UserId)" Size="@Size.Small" Variant="@Variant.Filled" Color="@Color.Primary">Profile</MudButton>
                                </MudTd>
                            }
                            else
                            {
                                <MudTd>
                                    <a target="_blank" href="Profile/@context.UserId">
                                        <MudCard>
                                            <MudCardHeader>
                                                <CardHeaderAvatar>
                                                    @if (!string.IsNullOrEmpty(context.Base64Photo))
                                                    {
                                                        <img class="" width="50" height="50" src="@context.Base64Photo">
                                                    }
                                                    else
                                                    {
                                                        <img class="" width="50" height="50" src="/images/DefaultUser.png">
                                                    }
                                                </CardHeaderAvatar>
                                                <CardHeaderContent>
                                                    <MudText Typo="Typo.h6"> <b>  @context.Name </b>  </MudText>
                                                    <MudText Typo="Typo.subtitle2"> Country : <b> @MapCountry(context.IdCountry) </b> | City : @context.City </MudText>
                                                    <MudText Typo="Typo.body2">Language : <b> @MapLanguage(context.IdLanguage) </b></MudText>
                                                    <MudText Typo="Typo.body2">Activity : <b>@MapActivity(context.IdActivity)</b> </MudText>
                                                </CardHeaderContent>
                                                <CardHeaderActions>
                                                    @if (context.Available)
                                                    {
                                                        <b> Available <MudIconButton Icon="@Icons.Material.Filled.CheckCircle" Color="Color.Success" />  </b>
                                                    }
                                                    else
                                                    {
                                                        <b> Not Available <MudIconButton Icon="@Icons.Material.Filled.Close" Color="Color.Error" />  </b>
                                                    }
                                                </CardHeaderActions>
                                            </MudCardHeader>
                                        </MudCard>
                                    </a>
                                </MudTd>
                            }

                        </RowTemplate>
                        <NoRecordsContent>
                            <MudText>No matching records found</MudText>
                        </NoRecordsContent>
                        <LoadingContent>
                            <MudText>Loading...</MudText>
                        </LoadingContent>
                        <PagerContent>
                            <MudTablePager />
                        </PagerContent>
                    </MudTable>
                </MudCardContent>
                <MudCardActions>
                </MudCardActions>
            </MudCard>
        </MudItem>
    </MudGrid>
</MudContainer>

@code {



    private IEnumerable<UserProfile> pagedData;
    private MudTable<UserProfile> table;
    private int TotalSearchResults = 0;
    private bool FirstSubmit = true;
    private bool DisplayInCards = false;
    private async Task<TableData<UserProfile>> ServerReload(TableState state)
    {
        if (searchModel.IdLanguage != 0 || searchModel.IdCountry != 0 || !string.IsNullOrEmpty(searchModel.City))
        {
            if (FirstSubmit)
            {
                TotalSearchResults = await _profileService.CountSearchProfiles(searchModel);
                FirstSubmit = false;
            }
            try
            {
                pagedData = await _profileService.SearchProfiles(state.Page + 1, searchModel);
            }
            catch (Exception ex)
            {
                //hundle changing the page size not if first page
                await table.ReloadServerData();
            }
        }
        else
        {
            pagedData = new List<UserProfile>();
        }
        return new TableData<UserProfile>() { TotalItems = TotalSearchResults, Items = pagedData };

    }

    SearchModel searchModel = new SearchModel
        {
            IdActivity = 0,
            IdCountry = 0,
            IdLanguage = 0,
            City = "",
            PageSize = 10,
            Approval = -1,// set this to 1 and it will display only approved users ( -1 : all users)
            Member = -1,
            Available = -1,
            testUser =-1// from search users page, param will be igonored
        };

    private Country SelectedCountry;
    private Language SelectedLanguage;
    private Activity SelectedActivity;

    private Dictionary<string, string> countries = new Dictionary<string, string>();
    private Dictionary<string, string> languages = new Dictionary<string, string>();
    private Dictionary<int, string> activities = new Dictionary<int, string>();
    private string[] ActiveCountries = new string[] { };
    private string[] ActiveLanguages = new string[] { };
    private int[] ActiveActivities = new int[] { };




    protected override async Task OnInitializedAsync()
    {


        countries = CountriesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);

        languages = LanguagesLocalizer.GetAllStrings().ToDictionary(s => s.Name, s => s.Value);

        activities = ActivitiesService.GetAll().ToDictionary(s => s.Id, s => s.Name);

        ActiveCountries = await _profileService.GetProfilesCountries();
        ActiveActivities = await _profileService.GetProfilesActivites();
        ActiveLanguages = await _profileService.GetProfilesLanguages(0);

    }

    private void ClearForm()
    {
        searchModel = new SearchModel
            {
                IdActivity = 0,
                IdCountry = 0,
                IdLanguage = 0,
                City = "",
                PageSize = 10,
                Approval = -1,// set this to 1 and it will display only approved users ( -1 : all users)
                Member = -1,
                Available = -1
            };
        SelectedCountry = null;
        SelectedLanguage = null;
        SelectedActivity = null;
    }

    private async Task<IEnumerable<Country>> SearchCountry(string value)
    {
        return countries.AsParallel().Where(x => ActiveCountries.Contains(x.Key) && (string.IsNullOrEmpty(value) ? true : x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase))).Select(s => new Country
            {
                Id = Convert.ToInt32(s.Key),
                Name = s.Value
            }).OrderBy(x => x.Name);
    }
    private async Task<IEnumerable<Language>> SearchLanguage(string value)
    {
        return languages.AsParallel().Where(x => ActiveLanguages.Contains(x.Key) && (string.IsNullOrEmpty(value) ? true : x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase))).Select(s => new Language
            {
                Id = Convert.ToInt32(s.Key),
                Name = s.Value
            }).OrderBy(x => x.Name);
    }
    private async Task<IEnumerable<Activity>> SearchActivity(string value)
    {
        return activities.AsParallel().Where(x => ActiveActivities.Contains(x.Key) && (string.IsNullOrEmpty(value) ? true : x.Value.Contains(value, StringComparison.InvariantCultureIgnoreCase))).Select(s => new Activity
            {
                Id = Convert.ToInt32(s.Key),
                Name = s.Value
            }).OrderBy(x => x.Name);
    }

    private async Task CountryChanged(Country country)
    {
        if (country != null)
        {
            SelectedCountry = country;
            searchModel.IdCountry = country.Id;
            searchModel.IdLanguage = 0;
        }
        else
        {
            searchModel.IdCountry = 0;
        }
        ActiveLanguages = await _profileService.GetProfilesLanguages(searchModel.IdCountry);

    }
    private async Task LanguageChanged(Language language)
    {
        if (language != null)
        {
            SelectedLanguage = language;
            searchModel.IdLanguage = language.Id;
        }
        else
        {
            searchModel.IdLanguage = 0;
        }
    }
    private async Task ActivityChanged(Activity activity)
    {
        if (activity != null)
        {
            SelectedActivity = activity;
            searchModel.IdActivity = activity.Id;
        }
        else
        {
            searchModel.IdActivity = 0;
        }
    }



    private async Task UpdatePageSize(int size)
    {
        FirstSubmit = true;
        searchModel.PageSize = size;
    }
    private async Task SubmitNewSearch()
    {
        FirstSubmit = true;
        await table.ReloadServerData();
    }

    private string MapCountry(int id)
    {
        try
        {
            return countries[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapLanguage(int id)
    {
        try
        {
            return languages[id.ToString()];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
    private string MapActivity(int id)
    {
        try
        {
            return activities[id];
        }
        catch
        {
            return "NotFound_" + id;
        }
    }
}